function mtx = constructSemiinfiniteMatrix(fems, meshs, parameters)

geometries = fieldnames(meshs);
ngeom = length(geometries);

if ngeom ~= 1
    error('');
end

mesh_R = meshs.geometry1;
fem_R = fems.geometry1;

%% construct left-hand-side matrix
K_C = fem_R.stiffness_0;
K_C(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) = ...
    K_C(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) + ...
    K_C(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic2);
K_C(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) = ...
    K_C(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) + ...
    K_C(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_near_quasiperiodic2);
K_C(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) = ...
    K_C(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) + ...
    K_C(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_quasiperiodic2);

K_R = fem_R.stiffness;
K_R(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) = ...
    K_R(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) + ...
    K_R(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic2);
K_R(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) = ...
    K_R(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) + ...
    K_R(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_near_quasiperiodic2);
K_R(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) = ...
    K_R(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) + ...
    K_R(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_quasiperiodic2);

K_RE = fem_R.stiffness_end;
K_RE(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) = ...
    K_RE(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) + ...
    K_RE(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic2);
K_RE(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) = ...
    K_RE(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) + ...
    K_RE(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_near_quasiperiodic2);
K_RE(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) = ...
    K_RE(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) + ...
    K_RE(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_quasiperiodic2);

if ismember('Dirichlet', parameters.math.geometry1.boundary_conditions)
    K_C(mesh_R.index.node_infinite, mesh_R.index.node_infinite) = ...
        K_C(mesh_R.index.node_infinite, mesh_R.index.node_infinite) + ...
        K_R(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite);
    K_R(mesh_R.index.node_infinite, mesh_R.index.node_infinite) = ...
        K_R(mesh_R.index.node_infinite, mesh_R.index.node_infinite) + ...
        K_R(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite);
elseif ismember('Neumann', parameters.math.geometry1.boundary_conditions)
    K_R(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite) = ...
        K_R(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite) + ...
        K_R(mesh_R.index.node_infinite, mesh_R.index.node_infinite);
    K_RE(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite) = ...
        K_RE(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite) + ...
        K_R(mesh_R.index.node_infinite, mesh_R.index.node_infinite);
end

mtx.K_C = K_C(mesh_R.index.free_begin, mesh_R.index.free_begin);
mtx.K_R = K_R(mesh_R.index.free, mesh_R.index.free);
mtx.K_RE = K_RE(mesh_R.index.free_end, mesh_R.index.free_end);

E_R = K_R(mesh_R.index.node_purely_infinite, mesh_R.index.node_purely_near_infinite);
mtx.E_RB = sparse(mesh_R.n_free_nodes, mesh_R.n_free_begin_nodes);
mtx.E_R = sparse(mesh_R.n_free_nodes, mesh_R.n_free_nodes);
n_row_E_R = length(mesh_R.index.node_purely_infinite);
n_col_E_R = length(mesh_R.index.node_purely_near_infinite);
mtx.E_RB(1 : n_row_E_R, end - n_col_E_R + 1 : end) = E_R;
mtx.E_R(1 : n_row_E_R, end - n_col_E_R + 1 : end) = E_R;
if ismember('Dirichlet', parameters.math.geometry1.boundary_conditions)
    mtx.E_RE = mtx.E_R(1 : end - length(mesh_R.index.free) + length(mesh_R.index.free_end), :);
elseif ismember('Neumann', parameters.math.geometry1.boundary_conditions)
    mtx.E_RE = [mtx.E_R; sparse(length(mesh_R.index.free_end) - length(mesh_R.index.free), length(mesh_R.index.free))];
end

%% construct right-hand-side matrix
M_C = fem_R.mass_0;
M_C(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) = ...
    M_C(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) + ...
    M_C(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic2);
M_C(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) = ...
    M_C(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) + ...
    M_C(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_near_quasiperiodic2);
M_C(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) = ...
    M_C(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) + ...
    M_C(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_quasiperiodic2);

M_R = fem_R.mass;
M_R(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) = ...
    M_R(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) + ...
    M_R(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic2);
M_R(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) = ...
    M_R(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) + ...
    M_R(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_near_quasiperiodic2);
M_R(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) = ...
    M_R(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) + ...
    M_R(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_quasiperiodic2);

M_RE = fem_R.mass_end;
M_RE(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) = ...
    M_RE(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic1) + ...
    M_RE(mesh_R.index.node_near_quasiperiodic2, mesh_R.index.node_quasiperiodic2);
M_RE(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) = ...
    M_RE(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_near_quasiperiodic2) + ...
    M_RE(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_near_quasiperiodic2);
M_RE(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) = ...
    M_RE(mesh_R.index.node_quasiperiodic1, mesh_R.index.node_quasiperiodic1) + ...
    M_RE(mesh_R.index.node_quasiperiodic2, mesh_R.index.node_quasiperiodic2);

if ismember('Dirichlet', parameters.math.geometry1.boundary_conditions)
    M_C(mesh_R.index.node_infinite, mesh_R.index.node_infinite) = ...
        M_C(mesh_R.index.node_infinite, mesh_R.index.node_infinite) + ...
        M_R(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite);
    M_R(mesh_R.index.node_infinite, mesh_R.index.node_infinite) = ...
        M_R(mesh_R.index.node_infinite, mesh_R.index.node_infinite) + ...
        M_R(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite);
elseif ismember('Neumann', parameters.math.geometry1.boundary_conditions)
    M_R(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite) = ...
        M_R(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite) + ...
        M_R(mesh_R.index.node_infinite, mesh_R.index.node_infinite);
    M_RE(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite) = ...
        M_RE(mesh_R.index.node_infinite_opposite, mesh_R.index.node_infinite_opposite) + ...
        M_R(mesh_R.index.node_infinite, mesh_R.index.node_infinite);
end

mtx.M_C = M_C(mesh_R.index.free_begin, mesh_R.index.free_begin);
mtx.M_R = M_R(mesh_R.index.free, mesh_R.index.free);
mtx.M_RE = M_RE(mesh_R.index.free_end, mesh_R.index.free_end);

F_R = M_R(mesh_R.index.node_purely_infinite, mesh_R.index.node_purely_near_infinite);
mtx.F_RB = sparse(mesh_R.n_free_nodes, mesh_R.n_free_begin_nodes);
mtx.F_R = sparse(mesh_R.n_free_nodes, mesh_R.n_free_nodes);
n_row_F_R = length(mesh_R.index.node_purely_infinite);
n_col_F_R = length(mesh_R.index.node_purely_near_infinite);
mtx.F_RB(1 : n_row_F_R, end - n_col_F_R + 1 : end) = F_R;
mtx.F_R(1 : n_row_F_R, end - n_col_F_R + 1 : end) = F_R;
if ismember('Dirichlet', parameters.math.geometry1.boundary_conditions)
    mtx.F_RE = mtx.F_R(1 : end - length(mesh_R.index.free) + length(mesh_R.index.free_end), :);
elseif ismember('Neumann', parameters.math.geometry1.boundary_conditions)
    mtx.F_RE = [mtx.F_R; sparse(length(mesh_R.index.free_end) - length(mesh_R.index.free), length(mesh_R.index.free))];
end


%% construct finite matrices
num_blocks_R = parameters.num_blocks;  % 1 for center

mtx.KK = kron(speye(num_blocks_R - 2), mtx.K_R);
mtx.KK = blkdiag(mtx.K_C, mtx.KK, mtx.K_RE);
row_index_E_R = 2 : num_blocks_R - 2;
col_index_E_R = 1 : num_blocks_R - 3;
mtx.EE_R = sparse(row_index_E_R, col_index_E_R, 1, num_blocks_R - 2, num_blocks_R - 2, num_blocks_R - 3);
mtx.EE_R = kron(mtx.EE_R, mtx.E_R);
mtx.EE_R = blkdiag(sparse(size(mtx.K_C, 1), size(mtx.K_C, 2)), mtx.EE_R, sparse(size(mtx.K_RE, 1), size(mtx.K_RE, 2)));
mtx.EE_R(size(mtx.K_C, 1) + 1 : size(mtx.K_C, 1) + size(mtx.K_R, 1), 1 : size(mtx.K_C, 2)) = mtx.E_RB;
mtx.EE_R(end - size(mtx.K_RE, 1) + 1 : end, end - size(mtx.K_RE, 2) - size(mtx.K_R, 2) + 1 : end - size(mtx.K_RE, 2)) = mtx.E_RE;
mtx.KK = mtx.KK + mtx.EE_R + mtx.EE_R';

mtx.MM = kron(speye(num_blocks_R - 2), mtx.M_R);
mtx.MM = blkdiag(mtx.M_C, mtx.MM, mtx.M_RE);
row_index_F_R = 2 : num_blocks_R - 2;
col_index_F_R = 1 : num_blocks_R - 3;
mtx.FF_R = sparse(row_index_F_R, col_index_F_R, 1, num_blocks_R - 2, num_blocks_R - 2, num_blocks_R - 3);
mtx.FF_R = kron(mtx.FF_R, mtx.F_R);
mtx.FF_R = blkdiag(sparse(size(mtx.M_C, 1), size(mtx.M_C, 2)), mtx.FF_R, sparse(size(mtx.M_RE, 1), size(mtx.M_RE, 2)));
mtx.FF_R(size(mtx.M_C, 1) + 1 : size(mtx.M_C, 1) + size(mtx.M_R, 1), 1 : size(mtx.M_C, 2)) = mtx.F_RB;
mtx.FF_R(end - size(mtx.M_RE, 1) + 1 : end, end - size(mtx.M_RE, 2) - size(mtx.M_R, 2) + 1 : end - size(mtx.M_RE, 2)) = mtx.F_RE;
mtx.MM = mtx.MM + mtx.FF_R + mtx.FF_R';






% %% construct left-hand-side matrix
% AA_0 = fem.stiffness_0;
% AA_0(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ... 
%     AA_0(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ... 
%     AA_0(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
% AA_0(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ... 
%     AA_0(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ... 
%     AA_0(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
% AA_0(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ... 
%     AA_0(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ... 
%     AA_0(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
% 
% AA = fem.stiffness;
% AA(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ... 
%     AA(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ... 
%     AA(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
% AA(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ... 
%     AA(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ... 
%     AA(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
% AA(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ... 
%     AA(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ... 
%     AA(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
% AA(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) = ... 
%         AA(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) + ... 
%         AA_0(mesh.index.node_infinite, mesh.index.node_infinite);
% 
% AA_end = fem.stiffness_end;
% AA_end(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ... 
%     AA_end(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ... 
%     AA_end(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
% AA_end(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ... 
%     AA_end(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ... 
%     AA_end(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
% AA_end(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ... 
%     AA_end(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ... 
%     AA_end(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
% AA_end(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) = ... 
%         AA_end(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) + ... 
%         AA_0(mesh.index.node_infinite, mesh.index.node_infinite);
% 
% mtx.A0 = AA_0(mesh.index.free_0, mesh.index.free_0);
% mtx.A = AA(mesh.index.free, mesh.index.free);
% mtx.Ae = AA_end(mesh.index.free_end, mesh.index.free_end);
% 
% EE = AA(mesh.index.node_purely_infinite, mesh.index.node_purely_near_infinite); 
% mtx.E0 = sparse(mesh.n_free_nodes, mesh.n_free0_nodes);
% mtx.E = sparse(mesh.n_free_nodes, mesh.n_free_nodes);
% n_row_E = length(mesh.index.node_purely_infinite);
% n_col_E = length(mesh.index.node_purely_near_infinite);
% mtx.E0(1 : n_row_E, end - n_col_E + 1 : end) = EE;
% mtx.E(1 : n_row_E, end - n_col_E + 1 : end) = EE;
% mtx.Ee = [mtx.E; sparse(length(mesh.index.free_end) - length(mesh.index.free), length(mesh.index.free))];
% 
% %% construct right-hand-side matrix
% BB_0 = fem.mass_0;
% BB_0(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ... 
%     BB_0(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ... 
%     BB_0(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
% BB_0(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ... 
%     BB_0(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ... 
%     BB_0(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
% BB_0(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ... 
%     BB_0(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ... 
%     BB_0(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
% 
% BB = fem.mass;
% BB(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ... 
%     BB(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ... 
%     BB(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
% BB(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ... 
%     BB(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ... 
%     BB(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
% BB(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ... 
%     BB(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ... 
%     BB(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
% BB(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) = ... 
%         BB(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) + ... 
%         BB_0(mesh.index.node_infinite, mesh.index.node_infinite);
% 
% BB_end = fem.mass_end;
% BB_end(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ... 
%     BB_end(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ... 
%     BB_end(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
% BB_end(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ... 
%     BB_end(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ... 
%     BB_end(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
% BB_end(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ... 
%     BB_end(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ... 
%     BB_end(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
% BB_end(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) = ... 
%         BB_end(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) + ... 
%         BB_0(mesh.index.node_infinite, mesh.index.node_infinite);
% 
% mtx.B0 = BB_0(mesh.index.free_0, mesh.index.free_0);
% mtx.B = BB(mesh.index.free, mesh.index.free);
% mtx.Be = BB_end(mesh.index.free_end, mesh.index.free_end);
% 
% FF = BB(mesh.index.node_purely_infinite, mesh.index.node_purely_near_infinite); 
% mtx.F0 = sparse(mesh.n_free_nodes, mesh.n_free0_nodes);
% mtx.F = sparse(mesh.n_free_nodes, mesh.n_free_nodes);
% n_row_F = length(mesh.index.node_purely_infinite);
% n_col_F = length(mesh.index.node_purely_near_infinite);
% mtx.F0(1 : n_row_F, end - n_col_F + 1 : end) = FF;
% mtx.F(1 : n_row_F, end - n_col_F + 1 : end) = FF;
% mtx.Fe = [mtx.F; sparse(length(mesh.index.free_end) - length(mesh.index.free), length(mesh.index.free))];




% %% construct left-hand-side matrix
% AA = fem.stiffness;
% AA(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ... 
%     AA(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ... 
%     AA(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
% AA(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ... 
%     AA(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ... 
%     AA(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
% AA(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ... 
%     AA(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ... 
%     AA(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
% % AA(mesh.index.node_near_quasiperiodic2_plus_quasiperiodic1, mesh.index.node_near_quasiperiodic2_plus_quasiperiodic1) = ... 
% %     AA(mesh.index.node_near_quasiperiodic2_plus_quasiperiodic1, mesh.index.node_near_quasiperiodic2_plus_quasiperiodic1) + ... 
% %     AA(mesh.index.node_near_quasiperiodic2_plus_quasiperiodic2, mesh.index.node_near_quasiperiodic2_plus_quasiperiodic2);
% 
% mtx.A0 = AA(mesh.index.free_0, mesh.index.free_0);
% if ismember('Dirichlet', parameters.math.boundary_condition.self)
%     AA_infinite_opposite = fem.stiffness_infinite_opposite;
%     AA_infinite_opposite(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ...
%         AA_infinite_opposite(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ...
%         AA_infinite_opposite(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
%     AA_infinite_opposite(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ...
%         AA_infinite_opposite(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ...
%         AA_infinite_opposite(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
%     AA_infinite_opposite(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ...
%         AA_infinite_opposite(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ...
%         AA_infinite_opposite(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
%     mtx.A = AA_infinite_opposite;
%     mtx.A(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) = ... 
%         mtx.A(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) + ... 
%         AA_infinite_opposite(mesh.index.node_infinite, mesh.index.node_infinite);
%     mtx.A = mtx.A(mesh.index.free, mesh.index.free);
% 
%     AA_infinite = fem.stiffness_infinite;
%     AA_infinite(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ...
%         AA_infinite(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ...
%         AA_infinite(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
%     AA_infinite(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ...
%         AA_infinite(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ...
%         AA_infinite(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
%     AA_infinite(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ...
%         AA_infinite(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ...
%         AA_infinite(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
%     mtx.Ae = AA_infinite;
%     mtx.Ae(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) = ... 
%         mtx.Ae(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) + ... 
%         AA_infinite_opposite(mesh.index.node_infinite, mesh.index.node_infinite);
%     mtx.Ae = mtx.Ae(mesh.index.free_end, mesh.index.free_end);
% 
%     EE = AA(mesh.index.node_purely_infinite, mesh.index.node_purely_near_infinite); 
%     mtx.E0 = sparse(mesh.n_free_nodes, mesh.n_free0_nodes);
%     mtx.E = sparse(mesh.n_free_nodes, mesh.n_free_nodes);
%     n_row_E = length(mesh.index.node_purely_infinite);
%     n_col_E = length(mesh.index.node_purely_near_infinite);
%     mtx.E0(1 : n_row_E, end - n_col_E + 1 : end) = EE;
%     mtx.E(1 : n_row_E, end - n_col_E + 1 : end) = EE;
%     mtx.Ee = [mtx.E; sparse(length(mesh.index.free_end) - length(mesh.index.free), length(mesh.index.free))];
% else
%     mtx.A = AA;
%     mtx.A(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) = ... 
%         mtx.A(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) + ... 
%         AA(mesh.index.node_infinite, mesh.index.node_infinite);
%     mtx.Ae = mtx.A;
%     mtx.A = mtx.A(mesh.index.free, mesh.index.free);
%     mtx.Ae = mtx.Ae(mesh.index.free_end, mesh.index.free_end);
% 
%     EE = AA(mesh.index.node_purely_infinite, mesh.index.node_purely_near_infinite); 
%     mtx.E = sparse(mesh.n_free_nodes, mesh.n_free_nodes);
%     n_row_E = length(mesh.index.node_purely_infinite);
%     n_col_E = length(mesh.index.node_purely_near_infinite);
%     mtx.E(1 : n_row_E, end - n_col_E + 1 : end) = EE;
%     mtx.E0 = mtx.E;
%     mtx.Ee = [mtx.E; sparse(length(mesh.index.free_end) - length(mesh.index.free), length(mesh.index.free))];
% end
% 
% %% construct right-hand-side matrix
% BB = fem.mass;
% BB(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ... 
%     BB(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ... 
%     BB(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
% BB(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ... 
%     BB(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ... 
%     BB(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
% BB(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ... 
%     BB(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ... 
%     BB(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
% % BB(mesh.index.node_near_quasiperiodic2_plus_quasiperiodic1, mesh.index.node_near_quasiperiodic2_plus_quasiperiodic1) = ... 
% %     BB(mesh.index.node_near_quasiperiodic2_plus_quasiperiodic1, mesh.index.node_near_quasiperiodic2_plus_quasiperiodic1) + ... 
% %     BB(mesh.index.node_near_quasiperiodic2_plus_quasiperiodic2, mesh.index.node_near_quasiperiodic2_plus_quasiperiodic2);
% 
% mtx.B0 = BB(mesh.index.free_0, mesh.index.free_0);
% if ismember('Dirichlet', parameters.math.boundary_condition.self)
%     BB_infinite_opposite = fem.mass_infinite_opposite;
%     BB_infinite_opposite(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) = ...
%         BB_infinite_opposite(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic1) + ...
%         BB_infinite_opposite(mesh.index.node_near_quasiperiodic2, mesh.index.node_quasiperiodic2);
%     BB_infinite_opposite(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) = ...
%         BB_infinite_opposite(mesh.index.node_quasiperiodic1, mesh.index.node_near_quasiperiodic2) + ...
%         BB_infinite_opposite(mesh.index.node_quasiperiodic2, mesh.index.node_near_quasiperiodic2);
%     BB_infinite_opposite(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) = ...
%         BB_infinite_opposite(mesh.index.node_quasiperiodic1, mesh.index.node_quasiperiodic1) + ...
%         BB_infinite_opposite(mesh.index.node_quasiperiodic2, mesh.index.node_quasiperiodic2);
% 
%     mtx.B = BB_infinite_opposite;
%     mtx.B(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) = ... 
%         mtx.B(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) + ... 
%         BB_infinite_opposite(mesh.index.node_infinite, mesh.index.node_infinite);
%     mtx.Be = mtx.B;
%     mtx.B = mtx.B(mesh.index.free, mesh.index.free);
%     mtx.Be = mtx.Be(mesh.index.free_end, mesh.index.free_end);
% 
%     FF = BB(mesh.index.node_purely_infinite, mesh.index.node_purely_near_infinite);
%     mtx.F0 = sparse(mesh.n_free_nodes, mesh.n_free0_nodes);
%     mtx.F = sparse(mesh.n_free_nodes, mesh.n_free_nodes);
%     n_row_F = length(mesh.index.node_purely_infinite);
%     n_col_F = length(mesh.index.node_purely_near_infinite);
%     mtx.F0(1 : n_row_F, end - n_col_F + 1 : end) = FF;
%     mtx.F(1 : n_row_F, end - n_col_F + 1 : end) = FF;
%     mtx.Fe = [mtx.F; sparse(length(mesh.index.free_end) - length(mesh.index.free), length(mesh.index.free))];
% else
%     mtx.B = BB;
%     mtx.B(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) = ... 
%         mtx.B(mesh.index.node_infinite_opposite, mesh.index.node_infinite_opposite) + ... 
%         BB(mesh.index.node_infinite, mesh.index.node_infinite);
%     mtx.Be = mtx.B;
%     mtx.B = mtx.B(mesh.index.free, mesh.index.free);
%     mtx.Be = mtx.Be(mesh.index.free_end, mesh.index.free_end);
% 
%     FF = BB(mesh.index.node_purely_infinite, mesh.index.node_purely_near_infinite);
%     mtx.F = sparse(mesh.n_free_nodes, mesh.n_free_nodes);
%     n_row_F = length(mesh.index.node_purely_infinite);
%     n_col_F = length(mesh.index.node_purely_near_infinite);
%     mtx.F(1 : n_row_F, end - n_col_F + 1 : end) = FF;
%     mtx.F0 = mtx.F;
%     mtx.Fe = [mtx.F; sparse(length(mesh.index.free_end) - length(mesh.index.free), length(mesh.index.free))];
% end

end